[core]
    pager = less -r
    editor = "vim"
    excludefile = ~/.gitignore
    excludesfile = /home/rstelmac/.gitignore_global

[include]
    path = .gitconfig_work

[color]
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[alias]
    #short status
    s = status -s -b

    #create new branch and check it out
    cb = checkout -b
    bc = checkout -b
    b = branch
    c = checkout
    p = push
    pu = pull --ff-only

    f = fetch
    fa = fetch --all

    cm = commit -am
    co = commit
    ca = commit --amend

    #safe merging
    m = merge --ff-only
    mff = merge --ff-only
    mnff = merge --no-ff

    rb = rebase
    rba = rebase --autosquash
    rbi = rebase -i
    rbcont = rebase --continue
    rbas = rebase --autostash
    u = add --update :/

    #diffs
    d = diff --stat
    #diff with no whitespace
    db = diff -b
    #diff with words only and no whitespace
    dw = diff --color-words -b
    dd = diff --color-words -b
    dh = diff --color-words -b HEAD
    diff=diff --ws-error-highlight=all

    #graphs
    go = log --graph --pretty=format:'%C(yellow)%h%Creset%C(red bold)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset' --decorate --abbrev-commit --all --author-date-order
    god = log --graph --pretty=format:'%C(yellow)%h%Creset%C(red bold)%d%Creset %s %Cgreen(%ci) %C(blue)<%an>%Creset' --decorate --abbrev-commit
    g = log --oneline --decorate --graph --all
    gs = log --oneline --decorate --graph --all --author-date-order
    gbd = log --graph --simplify-by-decoration --pretty=format:'%C(yellow)%h%C(white)%d %C(bold black)%ai %C(reset)%n' --all
    gb = log --graph --simplify-by-decoration --pretty=format:'%C(yellow)%h%C(white)%d %C(bold black)%ar %C(reset)%n' --all
    g2 = log --graph --pretty=format':%s %C(bold blue)%an, %ar %Cgreen(%h)%Creset'
    g3 = log --pretty=format:"%Cgreen%h%Creset %ad %C(cyan)%an%Creset %s%C(red)%d%Creset" --graph --date=short
    g4 = log --graph --abbrev-commit --decorate --all --format=format:\"%C(bold blue)%h%C(dim black) %C(reset)%C(dim white)%aD%C(dim black) %C(bold blue)%an%C(reset) %C(green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)\"
    g5 = log --graph --abbrev-commit --decorate --all --format=format:\"%C(bold blue)%h%C(reset) %C(bold cyan)%aD%C(dim white) %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)\"
    glong = log --stat --decorate --graph
    logMerges = log --first-parent --graph
    ll = log --pretty=format:\"%C(bold blue)%h %C(red)%d %C(white bold)%s %Cgreen(%cr) %C(blue)<%an>%Creset %n\" --decorate --stat --graph


    #graph with diffs, useful for tracking one file history
    gdiff = log --oneline --decorate --graph --full-history -p  -c --color-words -b
    gdifff = log --oneline --decorate --graph --follow --full-history -p  -c --color-words -b
    gldiff = log --format=medium --decorate --graph -p  -c
    gldifff = log --format=medium --decorate --graph --follow -p  -c

    # https://salferrarello.com/using-vim-view-git-commits/
    # View commit with K (upper case k)
    vim = "!git log --graph --oneline --decorate --all --pretty=format:'%h %d %s <%an>' | vim -R -c \"set filetype=git nowrap\" -"
    nvim = "!git log --graph --oneline --decorate --all --pretty=format:'%h %d %s <%an>' | nvim -R -c \"set filetype=git nowrap\" -"


    mt = mergetool
    dt = difftool
    listExcluded = ls-files --other --ignored --exclude-standard
    ls = ls-files -c --exclude-standard
    ls-all = ls-files -co --exclude-standard
    logBranch = log --no-merges
    sh = show
    sss = show
    ss = show --stat
    home = rev-parse --show-toplevel
    movebranchto = branch -f
    moveto = reset --hard

    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short

    #Human aliases :)
    bb = for-each-ref --sort=-committerdate --format=\"%(color:bold black)%(authordate:relative)\t%(color:white)%(authorname)\t%(color:cyan bold)%(HEAD) %(color:green nobold)%(refname:short) %(color:white)-> %(upstream:short)\" refs/heads refs/      +++remotes
    branches = for-each-ref --sort=-committerdate --format=\"%(color:bold black)%(authordate:relative)\t%(color:white)%(authorname)\t%(color:cyan bold)%(HEAD) %(color:green nobold)%(refname:short) %(color:white)-> %(upstream:short)\" refs/heads refs/+++remotes
hes = stash list
    remotes = remote -v

    stash-all = stash save --include-untracked
    unstage = reset -q HEAD --
    discard = checkout --
    uncommit = reset --mixed HEAD~
    amend = commit --amend

    # Add a file/directory to your .gitignore
    ignore = "!f() { echo \"$1\" >> .gitignore; }; f"

    # Show which commits are safe to amend/rebase
    unpushed = log @{u}..
    # Show what you've done since yesterday to prepare your standup
    standup = "!git log --since yesterday --author $(git config user.email) --pretty=short --stat"
    # Show the history difference between a local branche and its remote
    divergence = "!git log --left-right --graph --cherry-pick --oneline $1...origin/$1"
    # divergence = log --left-right --graph --cherry-pick --oneline $1...origin/$1

    # find file in repo
    find = "!git ls-files | grep -i"
    grep = grep -Ii
    aliases = "!git config -l | grep alias | cut -c 7-"
    lasttag = describe --tags --abbrev=0

    # prevent checking of changes on some files
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

    # unstages changes in the index, discards changes in the working directory, and removes any new files.
    nevermindall = !git reset --hard HEAD && git clean -d -f
    # as above, but keeps untraced
    nevermind = reset --hard HEAD

    diffstaged = diff --cached --diff-algorithm=minimal -w

    wip = commit --fixup HEAD
    wipm = commit --squash HEAD -m

    # use git fixup COMMIT to change a specific "COMMIT", exactly like you would use git commit --amend to change the latest one.
    # You can use all git commit arguments, like -a, -p and filenames. It will respect your index, so you can use git add. It won't touch the changes you are not committing.
    fixuprb = "!f() { TARGET=$(git rev-parse "$1"); git commit --fixup=$TARGET ${@:2} && EDITOR=true git rebase -i --autostash --autosquash $TARGET^; }; f"

    fixup = commit --fixup
    squash = commit --squash

[commit]
    verbose = 1

[pull]
        rebase = true
